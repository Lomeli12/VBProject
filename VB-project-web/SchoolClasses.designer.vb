'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.34209
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="School")>  _
Partial Public Class SchoolClassesDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCourse(instance As Course)
    End Sub
  Partial Private Sub UpdateCourse(instance As Course)
    End Sub
  Partial Private Sub DeleteCourse(instance As Course)
    End Sub
  Partial Private Sub InsertCourseLocation(instance As CourseLocation)
    End Sub
  Partial Private Sub UpdateCourseLocation(instance As CourseLocation)
    End Sub
  Partial Private Sub DeleteCourseLocation(instance As CourseLocation)
    End Sub
  Partial Private Sub InsertCourseSection(instance As CourseSection)
    End Sub
  Partial Private Sub UpdateCourseSection(instance As CourseSection)
    End Sub
  Partial Private Sub DeleteCourseSection(instance As CourseSection)
    End Sub
  Partial Private Sub InsertEducation(instance As Education)
    End Sub
  Partial Private Sub UpdateEducation(instance As Education)
    End Sub
  Partial Private Sub DeleteEducation(instance As Education)
    End Sub
  Partial Private Sub InsertEnrollment(instance As Enrollment)
    End Sub
  Partial Private Sub UpdateEnrollment(instance As Enrollment)
    End Sub
  Partial Private Sub DeleteEnrollment(instance As Enrollment)
    End Sub
  Partial Private Sub InsertGrade(instance As Grade)
    End Sub
  Partial Private Sub UpdateGrade(instance As Grade)
    End Sub
  Partial Private Sub DeleteGrade(instance As Grade)
    End Sub
  Partial Private Sub InsertMajor(instance As Major)
    End Sub
  Partial Private Sub UpdateMajor(instance As Major)
    End Sub
  Partial Private Sub DeleteMajor(instance As Major)
    End Sub
  Partial Private Sub InsertRank(instance As Rank)
    End Sub
  Partial Private Sub UpdateRank(instance As Rank)
    End Sub
  Partial Private Sub DeleteRank(instance As Rank)
    End Sub
  Partial Private Sub InsertStudent(instance As Student)
    End Sub
  Partial Private Sub UpdateStudent(instance As Student)
    End Sub
  Partial Private Sub DeleteStudent(instance As Student)
    End Sub
  Partial Private Sub InsertTeacher(instance As Teacher)
    End Sub
  Partial Private Sub UpdateTeacher(instance As Teacher)
    End Sub
  Partial Private Sub DeleteTeacher(instance As Teacher)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.System.Configuration.ConfigurationManager.ConnectionStrings("SchoolConnectionString").ConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Courses() As System.Data.Linq.Table(Of Course)
		Get
			Return Me.GetTable(Of Course)
		End Get
	End Property
	
	Public ReadOnly Property CourseLocations() As System.Data.Linq.Table(Of CourseLocation)
		Get
			Return Me.GetTable(Of CourseLocation)
		End Get
	End Property
	
	Public ReadOnly Property CourseSections() As System.Data.Linq.Table(Of CourseSection)
		Get
			Return Me.GetTable(Of CourseSection)
		End Get
	End Property
	
	Public ReadOnly Property Educations() As System.Data.Linq.Table(Of Education)
		Get
			Return Me.GetTable(Of Education)
		End Get
	End Property
	
	Public ReadOnly Property Enrollments() As System.Data.Linq.Table(Of Enrollment)
		Get
			Return Me.GetTable(Of Enrollment)
		End Get
	End Property
	
	Public ReadOnly Property Grades() As System.Data.Linq.Table(Of Grade)
		Get
			Return Me.GetTable(Of Grade)
		End Get
	End Property
	
	Public ReadOnly Property Majors() As System.Data.Linq.Table(Of Major)
		Get
			Return Me.GetTable(Of Major)
		End Get
	End Property
	
	Public ReadOnly Property Ranks() As System.Data.Linq.Table(Of Rank)
		Get
			Return Me.GetTable(Of Rank)
		End Get
	End Property
	
	Public ReadOnly Property Students() As System.Data.Linq.Table(Of Student)
		Get
			Return Me.GetTable(Of Student)
		End Get
	End Property
	
	Public ReadOnly Property Teachers() As System.Data.Linq.Table(Of Teacher)
		Get
			Return Me.GetTable(Of Teacher)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Course")>  _
Partial Public Class Course
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseID As Integer
	
	Private _CourseName As String
	
	Private _CoursePrereq As System.Nullable(Of Integer)
	
	Private _CourseUnits As Byte
	
	Private _CourseSections As EntitySet(Of CourseSection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnCourseNameChanging(value As String)
    End Sub
    Partial Private Sub OnCourseNameChanged()
    End Sub
    Partial Private Sub OnCoursePrereqChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnCoursePrereqChanged()
    End Sub
    Partial Private Sub OnCourseUnitsChanging(value As Byte)
    End Sub
    Partial Private Sub OnCourseUnitsChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseSections = New EntitySet(Of CourseSection)(AddressOf Me.attach_CourseSections, AddressOf Me.detach_CourseSections)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseName", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property CourseName() As String
		Get
			Return Me._CourseName
		End Get
		Set
			If (String.Equals(Me._CourseName, value) = false) Then
				Me.OnCourseNameChanging(value)
				Me.SendPropertyChanging
				Me._CourseName = value
				Me.SendPropertyChanged("CourseName")
				Me.OnCourseNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CoursePrereq", DbType:="Int")>  _
	Public Property CoursePrereq() As System.Nullable(Of Integer)
		Get
			Return Me._CoursePrereq
		End Get
		Set
			If (Me._CoursePrereq.Equals(value) = false) Then
				Me.OnCoursePrereqChanging(value)
				Me.SendPropertyChanging
				Me._CoursePrereq = value
				Me.SendPropertyChanged("CoursePrereq")
				Me.OnCoursePrereqChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseUnits", DbType:="TinyInt NOT NULL")>  _
	Public Property CourseUnits() As Byte
		Get
			Return Me._CourseUnits
		End Get
		Set
			If ((Me._CourseUnits = value)  _
						= false) Then
				Me.OnCourseUnitsChanging(value)
				Me.SendPropertyChanging
				Me._CourseUnits = value
				Me.SendPropertyChanged("CourseUnits")
				Me.OnCourseUnitsChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseSection", Storage:="_CourseSections", ThisKey:="CourseID", OtherKey:="CourseID")>  _
	Public Property CourseSections() As EntitySet(Of CourseSection)
		Get
			Return Me._CourseSections
		End Get
		Set
			Me._CourseSections.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.Course = Me
	End Sub
	
	Private Sub detach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.Course = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseLocation")>  _
Partial Public Class CourseLocation
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseLocationID As Integer
	
	Private _Building As String
	
	Private _Room As String
	
	Private _ComputerLab As Boolean
	
	Private _SeatCapacity As Short
	
	Private _CourseSections As EntitySet(Of CourseSection)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseLocationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseLocationIDChanged()
    End Sub
    Partial Private Sub OnBuildingChanging(value As String)
    End Sub
    Partial Private Sub OnBuildingChanged()
    End Sub
    Partial Private Sub OnRoomChanging(value As String)
    End Sub
    Partial Private Sub OnRoomChanged()
    End Sub
    Partial Private Sub OnComputerLabChanging(value As Boolean)
    End Sub
    Partial Private Sub OnComputerLabChanged()
    End Sub
    Partial Private Sub OnSeatCapacityChanging(value As Short)
    End Sub
    Partial Private Sub OnSeatCapacityChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseSections = New EntitySet(Of CourseSection)(AddressOf Me.attach_CourseSections, AddressOf Me.detach_CourseSections)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseLocationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CourseLocationID() As Integer
		Get
			Return Me._CourseLocationID
		End Get
		Set
			If ((Me._CourseLocationID = value)  _
						= false) Then
				Me.OnCourseLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseLocationID = value
				Me.SendPropertyChanged("CourseLocationID")
				Me.OnCourseLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Building", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Building() As String
		Get
			Return Me._Building
		End Get
		Set
			If (String.Equals(Me._Building, value) = false) Then
				Me.OnBuildingChanging(value)
				Me.SendPropertyChanging
				Me._Building = value
				Me.SendPropertyChanged("Building")
				Me.OnBuildingChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Room", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Room() As String
		Get
			Return Me._Room
		End Get
		Set
			If (String.Equals(Me._Room, value) = false) Then
				Me.OnRoomChanging(value)
				Me.SendPropertyChanging
				Me._Room = value
				Me.SendPropertyChanged("Room")
				Me.OnRoomChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ComputerLab", DbType:="Bit NOT NULL")>  _
	Public Property ComputerLab() As Boolean
		Get
			Return Me._ComputerLab
		End Get
		Set
			If ((Me._ComputerLab = value)  _
						= false) Then
				Me.OnComputerLabChanging(value)
				Me.SendPropertyChanging
				Me._ComputerLab = value
				Me.SendPropertyChanged("ComputerLab")
				Me.OnComputerLabChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SeatCapacity", DbType:="SmallInt NOT NULL")>  _
	Public Property SeatCapacity() As Short
		Get
			Return Me._SeatCapacity
		End Get
		Set
			If ((Me._SeatCapacity = value)  _
						= false) Then
				Me.OnSeatCapacityChanging(value)
				Me.SendPropertyChanging
				Me._SeatCapacity = value
				Me.SendPropertyChanged("SeatCapacity")
				Me.OnSeatCapacityChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseLocation_CourseSection", Storage:="_CourseSections", ThisKey:="CourseLocationID", OtherKey:="CourseLocationID")>  _
	Public Property CourseSections() As EntitySet(Of CourseSection)
		Get
			Return Me._CourseSections
		End Get
		Set
			Me._CourseSections.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.CourseLocation = Me
	End Sub
	
	Private Sub detach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.CourseLocation = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.CourseSection")>  _
Partial Public Class CourseSection
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _CourseSectionID As Integer
	
	Private _CourseID As Integer
	
	Private _CourseLocationID As Integer
	
	Private _CourseStartDate As System.Nullable(Of Date)
	
	Private _CourseEndDate As System.Nullable(Of Date)
	
	Private _TeacherID As System.Nullable(Of Integer)
	
	Private _Enrollments As EntitySet(Of Enrollment)
	
	Private _Course As EntityRef(Of Course)
	
	Private _CourseLocation As EntityRef(Of CourseLocation)
	
	Private _Teacher As EntityRef(Of Teacher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnCourseSectionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseSectionIDChanged()
    End Sub
    Partial Private Sub OnCourseIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseIDChanged()
    End Sub
    Partial Private Sub OnCourseLocationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseLocationIDChanged()
    End Sub
    Partial Private Sub OnCourseStartDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCourseStartDateChanged()
    End Sub
    Partial Private Sub OnCourseEndDateChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCourseEndDateChanged()
    End Sub
    Partial Private Sub OnTeacherIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnTeacherIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enrollments = New EntitySet(Of Enrollment)(AddressOf Me.attach_Enrollments, AddressOf Me.detach_Enrollments)
		Me._Course = CType(Nothing, EntityRef(Of Course))
		Me._CourseLocation = CType(Nothing, EntityRef(Of CourseLocation))
		Me._Teacher = CType(Nothing, EntityRef(Of Teacher))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseSectionID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property CourseSectionID() As Integer
		Get
			Return Me._CourseSectionID
		End Get
		Set
			If ((Me._CourseSectionID = value)  _
						= false) Then
				Me.OnCourseSectionIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseSectionID = value
				Me.SendPropertyChanged("CourseSectionID")
				Me.OnCourseSectionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseID", DbType:="Int NOT NULL")>  _
	Public Property CourseID() As Integer
		Get
			Return Me._CourseID
		End Get
		Set
			If ((Me._CourseID = value)  _
						= false) Then
				If Me._Course.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseID = value
				Me.SendPropertyChanged("CourseID")
				Me.OnCourseIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseLocationID", DbType:="Int NOT NULL")>  _
	Public Property CourseLocationID() As Integer
		Get
			Return Me._CourseLocationID
		End Get
		Set
			If ((Me._CourseLocationID = value)  _
						= false) Then
				If Me._CourseLocation.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseLocationIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseLocationID = value
				Me.SendPropertyChanged("CourseLocationID")
				Me.OnCourseLocationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseStartDate", DbType:="SmallDateTime")>  _
	Public Property CourseStartDate() As System.Nullable(Of Date)
		Get
			Return Me._CourseStartDate
		End Get
		Set
			If (Me._CourseStartDate.Equals(value) = false) Then
				Me.OnCourseStartDateChanging(value)
				Me.SendPropertyChanging
				Me._CourseStartDate = value
				Me.SendPropertyChanged("CourseStartDate")
				Me.OnCourseStartDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseEndDate", DbType:="SmallDateTime")>  _
	Public Property CourseEndDate() As System.Nullable(Of Date)
		Get
			Return Me._CourseEndDate
		End Get
		Set
			If (Me._CourseEndDate.Equals(value) = false) Then
				Me.OnCourseEndDateChanging(value)
				Me.SendPropertyChanging
				Me._CourseEndDate = value
				Me.SendPropertyChanged("CourseEndDate")
				Me.OnCourseEndDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeacherID", DbType:="Int")>  _
	Public Property TeacherID() As System.Nullable(Of Integer)
		Get
			Return Me._TeacherID
		End Get
		Set
			If (Me._TeacherID.Equals(value) = false) Then
				If Me._Teacher.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnTeacherIDChanging(value)
				Me.SendPropertyChanging
				Me._TeacherID = value
				Me.SendPropertyChanged("TeacherID")
				Me.OnTeacherIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseSection_Enrollment", Storage:="_Enrollments", ThisKey:="CourseSectionID", OtherKey:="CourseSectionID")>  _
	Public Property Enrollments() As EntitySet(Of Enrollment)
		Get
			Return Me._Enrollments
		End Get
		Set
			Me._Enrollments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Course_CourseSection", Storage:="_Course", ThisKey:="CourseID", OtherKey:="CourseID", IsForeignKey:=true)>  _
	Public Property Course() As Course
		Get
			Return Me._Course.Entity
		End Get
		Set
			Dim previousValue As Course = Me._Course.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Course.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Course.Entity = Nothing
					previousValue.CourseSections.Remove(Me)
				End If
				Me._Course.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseSections.Add(Me)
					Me._CourseID = value.CourseID
				Else
					Me._CourseID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Course")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseLocation_CourseSection", Storage:="_CourseLocation", ThisKey:="CourseLocationID", OtherKey:="CourseLocationID", IsForeignKey:=true)>  _
	Public Property CourseLocation() As CourseLocation
		Get
			Return Me._CourseLocation.Entity
		End Get
		Set
			Dim previousValue As CourseLocation = Me._CourseLocation.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CourseLocation.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CourseLocation.Entity = Nothing
					previousValue.CourseSections.Remove(Me)
				End If
				Me._CourseLocation.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseSections.Add(Me)
					Me._CourseLocationID = value.CourseLocationID
				Else
					Me._CourseLocationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CourseLocation")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Teacher_CourseSection", Storage:="_Teacher", ThisKey:="TeacherID", OtherKey:="TeacherID", IsForeignKey:=true)>  _
	Public Property Teacher() As Teacher
		Get
			Return Me._Teacher.Entity
		End Get
		Set
			Dim previousValue As Teacher = Me._Teacher.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Teacher.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Teacher.Entity = Nothing
					previousValue.CourseSections.Remove(Me)
				End If
				Me._Teacher.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.CourseSections.Add(Me)
					Me._TeacherID = value.TeacherID
				Else
					Me._TeacherID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Teacher")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.CourseSection = Me
	End Sub
	
	Private Sub detach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.CourseSection = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Education")>  _
Partial Public Class Education
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EducationID As Integer
	
	Private _Education As String
	
	Private _Students As EntitySet(Of Student)
	
	Private _Teachers As EntitySet(Of Teacher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEducationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEducationIDChanged()
    End Sub
    Partial Private Sub OnEducationChanging(value As String)
    End Sub
    Partial Private Sub OnEducationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Students = New EntitySet(Of Student)(AddressOf Me.attach_Students, AddressOf Me.detach_Students)
		Me._Teachers = New EntitySet(Of Teacher)(AddressOf Me.attach_Teachers, AddressOf Me.detach_Teachers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EducationID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EducationID() As Integer
		Get
			Return Me._EducationID
		End Get
		Set
			If ((Me._EducationID = value)  _
						= false) Then
				Me.OnEducationIDChanging(value)
				Me.SendPropertyChanging
				Me._EducationID = value
				Me.SendPropertyChanged("EducationID")
				Me.OnEducationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Education", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Education() As String
		Get
			Return Me._Education
		End Get
		Set
			If (String.Equals(Me._Education, value) = false) Then
				Me.OnEducationChanging(value)
				Me.SendPropertyChanging
				Me._Education = value
				Me.SendPropertyChanged("Education")
				Me.OnEducationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Education_Student", Storage:="_Students", ThisKey:="EducationID", OtherKey:="EducationID")>  _
	Public Property Students() As EntitySet(Of Student)
		Get
			Return Me._Students
		End Get
		Set
			Me._Students.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Education_Teacher", Storage:="_Teachers", ThisKey:="EducationID", OtherKey:="EducationID")>  _
	Public Property Teachers() As EntitySet(Of Teacher)
		Get
			Return Me._Teachers
		End Get
		Set
			Me._Teachers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Education = Me
	End Sub
	
	Private Sub detach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Education = Nothing
	End Sub
	
	Private Sub attach_Teachers(ByVal entity As Teacher)
		Me.SendPropertyChanging
		entity.Education = Me
	End Sub
	
	Private Sub detach_Teachers(ByVal entity As Teacher)
		Me.SendPropertyChanging
		entity.Education = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Enrollment")>  _
Partial Public Class Enrollment
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EnrollmentID As Integer
	
	Private _CourseSectionID As Integer
	
	Private _StudentID As Integer
	
	Private _GradeID As System.Nullable(Of Integer)
	
	Private _CourseSection As EntityRef(Of CourseSection)
	
	Private _Grade As EntityRef(Of Grade)
	
	Private _Student As EntityRef(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEnrollmentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEnrollmentIDChanged()
    End Sub
    Partial Private Sub OnCourseSectionIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnCourseSectionIDChanged()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnGradeIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnGradeIDChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseSection = CType(Nothing, EntityRef(Of CourseSection))
		Me._Grade = CType(Nothing, EntityRef(Of Grade))
		Me._Student = CType(Nothing, EntityRef(Of Student))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EnrollmentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EnrollmentID() As Integer
		Get
			Return Me._EnrollmentID
		End Get
		Set
			If ((Me._EnrollmentID = value)  _
						= false) Then
				Me.OnEnrollmentIDChanging(value)
				Me.SendPropertyChanging
				Me._EnrollmentID = value
				Me.SendPropertyChanged("EnrollmentID")
				Me.OnEnrollmentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CourseSectionID", DbType:="Int NOT NULL")>  _
	Public Property CourseSectionID() As Integer
		Get
			Return Me._CourseSectionID
		End Get
		Set
			If ((Me._CourseSectionID = value)  _
						= false) Then
				If Me._CourseSection.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnCourseSectionIDChanging(value)
				Me.SendPropertyChanging
				Me._CourseSectionID = value
				Me.SendPropertyChanged("CourseSectionID")
				Me.OnCourseSectionIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", DbType:="Int NOT NULL")>  _
	Public Property StudentID() As Integer
		Get
			Return Me._StudentID
		End Get
		Set
			If ((Me._StudentID = value)  _
						= false) Then
				If Me._Student.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradeID", DbType:="Int")>  _
	Public Property GradeID() As System.Nullable(Of Integer)
		Get
			Return Me._GradeID
		End Get
		Set
			If (Me._GradeID.Equals(value) = false) Then
				If Me._Grade.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnGradeIDChanging(value)
				Me.SendPropertyChanging
				Me._GradeID = value
				Me.SendPropertyChanged("GradeID")
				Me.OnGradeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="CourseSection_Enrollment", Storage:="_CourseSection", ThisKey:="CourseSectionID", OtherKey:="CourseSectionID", IsForeignKey:=true)>  _
	Public Property CourseSection() As CourseSection
		Get
			Return Me._CourseSection.Entity
		End Get
		Set
			Dim previousValue As CourseSection = Me._CourseSection.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._CourseSection.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._CourseSection.Entity = Nothing
					previousValue.Enrollments.Remove(Me)
				End If
				Me._CourseSection.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enrollments.Add(Me)
					Me._CourseSectionID = value.CourseSectionID
				Else
					Me._CourseSectionID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("CourseSection")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grade_Enrollment", Storage:="_Grade", ThisKey:="GradeID", OtherKey:="GradeID", IsForeignKey:=true)>  _
	Public Property Grade() As Grade
		Get
			Return Me._Grade.Entity
		End Get
		Set
			Dim previousValue As Grade = Me._Grade.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Grade.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Grade.Entity = Nothing
					previousValue.Enrollments.Remove(Me)
				End If
				Me._Grade.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enrollments.Add(Me)
					Me._GradeID = value.GradeID
				Else
					Me._GradeID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Grade")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Enrollment", Storage:="_Student", ThisKey:="StudentID", OtherKey:="StudentID", IsForeignKey:=true)>  _
	Public Property Student() As Student
		Get
			Return Me._Student.Entity
		End Get
		Set
			Dim previousValue As Student = Me._Student.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Student.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Student.Entity = Nothing
					previousValue.Enrollments.Remove(Me)
				End If
				Me._Student.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Enrollments.Add(Me)
					Me._StudentID = value.StudentID
				Else
					Me._StudentID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Student")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Grade")>  _
Partial Public Class Grade
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _GradeID As Integer
	
	Private _Grade As String
	
	Private _GradePoint As System.Nullable(Of Decimal)
	
	Private _Enrollments As EntitySet(Of Enrollment)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnGradeIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnGradeIDChanged()
    End Sub
    Partial Private Sub OnGradeChanging(value As String)
    End Sub
    Partial Private Sub OnGradeChanged()
    End Sub
    Partial Private Sub OnGradePointChanging(value As System.Nullable(Of Decimal))
    End Sub
    Partial Private Sub OnGradePointChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enrollments = New EntitySet(Of Enrollment)(AddressOf Me.attach_Enrollments, AddressOf Me.detach_Enrollments)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradeID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property GradeID() As Integer
		Get
			Return Me._GradeID
		End Get
		Set
			If ((Me._GradeID = value)  _
						= false) Then
				Me.OnGradeIDChanging(value)
				Me.SendPropertyChanging
				Me._GradeID = value
				Me.SendPropertyChanged("GradeID")
				Me.OnGradeIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Grade", DbType:="VarChar(2) NOT NULL", CanBeNull:=false)>  _
	Public Property Grade() As String
		Get
			Return Me._Grade
		End Get
		Set
			If (String.Equals(Me._Grade, value) = false) Then
				Me.OnGradeChanging(value)
				Me.SendPropertyChanging
				Me._Grade = value
				Me.SendPropertyChanged("Grade")
				Me.OnGradeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_GradePoint", DbType:="Decimal(3,2)")>  _
	Public Property GradePoint() As System.Nullable(Of Decimal)
		Get
			Return Me._GradePoint
		End Get
		Set
			If (Me._GradePoint.Equals(value) = false) Then
				Me.OnGradePointChanging(value)
				Me.SendPropertyChanging
				Me._GradePoint = value
				Me.SendPropertyChanged("GradePoint")
				Me.OnGradePointChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Grade_Enrollment", Storage:="_Enrollments", ThisKey:="GradeID", OtherKey:="GradeID")>  _
	Public Property Enrollments() As EntitySet(Of Enrollment)
		Get
			Return Me._Enrollments
		End Get
		Set
			Me._Enrollments.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.Grade = Me
	End Sub
	
	Private Sub detach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.Grade = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Major")>  _
Partial Public Class Major
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _MajorID As Integer
	
	Private _Major As String
	
	Private _Students As EntitySet(Of Student)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnMajorIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnMajorIDChanged()
    End Sub
    Partial Private Sub OnMajorChanging(value As String)
    End Sub
    Partial Private Sub OnMajorChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Students = New EntitySet(Of Student)(AddressOf Me.attach_Students, AddressOf Me.detach_Students)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MajorID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property MajorID() As Integer
		Get
			Return Me._MajorID
		End Get
		Set
			If ((Me._MajorID = value)  _
						= false) Then
				Me.OnMajorIDChanging(value)
				Me.SendPropertyChanging
				Me._MajorID = value
				Me.SendPropertyChanged("MajorID")
				Me.OnMajorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Major", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Major() As String
		Get
			Return Me._Major
		End Get
		Set
			If (String.Equals(Me._Major, value) = false) Then
				Me.OnMajorChanging(value)
				Me.SendPropertyChanging
				Me._Major = value
				Me.SendPropertyChanged("Major")
				Me.OnMajorChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Major_Student", Storage:="_Students", ThisKey:="MajorID", OtherKey:="MajorID")>  _
	Public Property Students() As EntitySet(Of Student)
		Get
			Return Me._Students
		End Get
		Set
			Me._Students.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Major = Me
	End Sub
	
	Private Sub detach_Students(ByVal entity As Student)
		Me.SendPropertyChanging
		entity.Major = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Rank")>  _
Partial Public Class Rank
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RankID As Integer
	
	Private _Rank As String
	
	Private _Teachers As EntitySet(Of Teacher)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRankIDChanged()
    End Sub
    Partial Private Sub OnRankChanging(value As String)
    End Sub
    Partial Private Sub OnRankChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Teachers = New EntitySet(Of Teacher)(AddressOf Me.attach_Teachers, AddressOf Me.detach_Teachers)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RankID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RankID() As Integer
		Get
			Return Me._RankID
		End Get
		Set
			If ((Me._RankID = value)  _
						= false) Then
				Me.OnRankIDChanging(value)
				Me.SendPropertyChanging
				Me._RankID = value
				Me.SendPropertyChanged("RankID")
				Me.OnRankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Rank", DbType:="VarChar(25) NOT NULL", CanBeNull:=false)>  _
	Public Property Rank() As String
		Get
			Return Me._Rank
		End Get
		Set
			If (String.Equals(Me._Rank, value) = false) Then
				Me.OnRankChanging(value)
				Me.SendPropertyChanging
				Me._Rank = value
				Me.SendPropertyChanged("Rank")
				Me.OnRankChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Rank_Teacher", Storage:="_Teachers", ThisKey:="RankID", OtherKey:="RankID")>  _
	Public Property Teachers() As EntitySet(Of Teacher)
		Get
			Return Me._Teachers
		End Get
		Set
			Me._Teachers.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Teachers(ByVal entity As Teacher)
		Me.SendPropertyChanging
		entity.Rank = Me
	End Sub
	
	Private Sub detach_Teachers(ByVal entity As Teacher)
		Me.SendPropertyChanging
		entity.Rank = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Student")>  _
Partial Public Class Student
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _StudentID As Integer
	
	Private _Firstname As String
	
	Private _Lastname As String
	
	Private _EducationID As Integer
	
	Private _MajorID As System.Nullable(Of Integer)
	
	Private _IsActive As Boolean
	
	Private _Enrollments As EntitySet(Of Enrollment)
	
	Private _Education As EntityRef(Of Education)
	
	Private _Major As EntityRef(Of Major)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnStudentIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnStudentIDChanged()
    End Sub
    Partial Private Sub OnFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstnameChanged()
    End Sub
    Partial Private Sub OnLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnLastnameChanged()
    End Sub
    Partial Private Sub OnEducationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEducationIDChanged()
    End Sub
    Partial Private Sub OnMajorIDChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnMajorIDChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Enrollments = New EntitySet(Of Enrollment)(AddressOf Me.attach_Enrollments, AddressOf Me.detach_Enrollments)
		Me._Education = CType(Nothing, EntityRef(Of Education))
		Me._Major = CType(Nothing, EntityRef(Of Major))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StudentID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property StudentID() As Integer
		Get
			Return Me._StudentID
		End Get
		Set
			If ((Me._StudentID = value)  _
						= false) Then
				Me.OnStudentIDChanging(value)
				Me.SendPropertyChanging
				Me._StudentID = value
				Me.SendPropertyChanged("StudentID")
				Me.OnStudentIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Firstname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Firstname() As String
		Get
			Return Me._Firstname
		End Get
		Set
			If (String.Equals(Me._Firstname, value) = false) Then
				Me.OnFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Firstname = value
				Me.SendPropertyChanged("Firstname")
				Me.OnFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lastname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Lastname() As String
		Get
			Return Me._Lastname
		End Get
		Set
			If (String.Equals(Me._Lastname, value) = false) Then
				Me.OnLastnameChanging(value)
				Me.SendPropertyChanging
				Me._Lastname = value
				Me.SendPropertyChanged("Lastname")
				Me.OnLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EducationID", DbType:="Int NOT NULL")>  _
	Public Property EducationID() As Integer
		Get
			Return Me._EducationID
		End Get
		Set
			If ((Me._EducationID = value)  _
						= false) Then
				If Me._Education.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEducationIDChanging(value)
				Me.SendPropertyChanging
				Me._EducationID = value
				Me.SendPropertyChanged("EducationID")
				Me.OnEducationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_MajorID", DbType:="Int")>  _
	Public Property MajorID() As System.Nullable(Of Integer)
		Get
			Return Me._MajorID
		End Get
		Set
			If (Me._MajorID.Equals(value) = false) Then
				If Me._Major.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnMajorIDChanging(value)
				Me.SendPropertyChanging
				Me._MajorID = value
				Me.SendPropertyChanged("MajorID")
				Me.OnMajorIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Student_Enrollment", Storage:="_Enrollments", ThisKey:="StudentID", OtherKey:="StudentID")>  _
	Public Property Enrollments() As EntitySet(Of Enrollment)
		Get
			Return Me._Enrollments
		End Get
		Set
			Me._Enrollments.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Education_Student", Storage:="_Education", ThisKey:="EducationID", OtherKey:="EducationID", IsForeignKey:=true)>  _
	Public Property Education() As Education
		Get
			Return Me._Education.Entity
		End Get
		Set
			Dim previousValue As Education = Me._Education.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Education.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Education.Entity = Nothing
					previousValue.Students.Remove(Me)
				End If
				Me._Education.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Students.Add(Me)
					Me._EducationID = value.EducationID
				Else
					Me._EducationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Education")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Major_Student", Storage:="_Major", ThisKey:="MajorID", OtherKey:="MajorID", IsForeignKey:=true)>  _
	Public Property Major() As Major
		Get
			Return Me._Major.Entity
		End Get
		Set
			Dim previousValue As Major = Me._Major.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Major.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Major.Entity = Nothing
					previousValue.Students.Remove(Me)
				End If
				Me._Major.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Students.Add(Me)
					Me._MajorID = value.MajorID
				Else
					Me._MajorID = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("Major")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.Student = Me
	End Sub
	
	Private Sub detach_Enrollments(ByVal entity As Enrollment)
		Me.SendPropertyChanging
		entity.Student = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Teacher")>  _
Partial Public Class Teacher
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _TeacherID As Integer
	
	Private _Firstname As String
	
	Private _Lastname As String
	
	Private _EducationID As Integer
	
	Private _RankID As Integer
	
	Private _IsActive As Boolean
	
	Private _CourseSections As EntitySet(Of CourseSection)
	
	Private _Education As EntityRef(Of Education)
	
	Private _Rank As EntityRef(Of Rank)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnTeacherIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnTeacherIDChanged()
    End Sub
    Partial Private Sub OnFirstnameChanging(value As String)
    End Sub
    Partial Private Sub OnFirstnameChanged()
    End Sub
    Partial Private Sub OnLastnameChanging(value As String)
    End Sub
    Partial Private Sub OnLastnameChanged()
    End Sub
    Partial Private Sub OnEducationIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnEducationIDChanged()
    End Sub
    Partial Private Sub OnRankIDChanging(value As Integer)
    End Sub
    Partial Private Sub OnRankIDChanged()
    End Sub
    Partial Private Sub OnIsActiveChanging(value As Boolean)
    End Sub
    Partial Private Sub OnIsActiveChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._CourseSections = New EntitySet(Of CourseSection)(AddressOf Me.attach_CourseSections, AddressOf Me.detach_CourseSections)
		Me._Education = CType(Nothing, EntityRef(Of Education))
		Me._Rank = CType(Nothing, EntityRef(Of Rank))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TeacherID", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property TeacherID() As Integer
		Get
			Return Me._TeacherID
		End Get
		Set
			If ((Me._TeacherID = value)  _
						= false) Then
				Me.OnTeacherIDChanging(value)
				Me.SendPropertyChanging
				Me._TeacherID = value
				Me.SendPropertyChanged("TeacherID")
				Me.OnTeacherIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Firstname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Firstname() As String
		Get
			Return Me._Firstname
		End Get
		Set
			If (String.Equals(Me._Firstname, value) = false) Then
				Me.OnFirstnameChanging(value)
				Me.SendPropertyChanging
				Me._Firstname = value
				Me.SendPropertyChanged("Firstname")
				Me.OnFirstnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Lastname", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Lastname() As String
		Get
			Return Me._Lastname
		End Get
		Set
			If (String.Equals(Me._Lastname, value) = false) Then
				Me.OnLastnameChanging(value)
				Me.SendPropertyChanging
				Me._Lastname = value
				Me.SendPropertyChanged("Lastname")
				Me.OnLastnameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EducationID", DbType:="Int NOT NULL")>  _
	Public Property EducationID() As Integer
		Get
			Return Me._EducationID
		End Get
		Set
			If ((Me._EducationID = value)  _
						= false) Then
				If Me._Education.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEducationIDChanging(value)
				Me.SendPropertyChanging
				Me._EducationID = value
				Me.SendPropertyChanged("EducationID")
				Me.OnEducationIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RankID", DbType:="Int NOT NULL")>  _
	Public Property RankID() As Integer
		Get
			Return Me._RankID
		End Get
		Set
			If ((Me._RankID = value)  _
						= false) Then
				If Me._Rank.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRankIDChanging(value)
				Me.SendPropertyChanging
				Me._RankID = value
				Me.SendPropertyChanged("RankID")
				Me.OnRankIDChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IsActive", DbType:="Bit NOT NULL")>  _
	Public Property IsActive() As Boolean
		Get
			Return Me._IsActive
		End Get
		Set
			If ((Me._IsActive = value)  _
						= false) Then
				Me.OnIsActiveChanging(value)
				Me.SendPropertyChanging
				Me._IsActive = value
				Me.SendPropertyChanged("IsActive")
				Me.OnIsActiveChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Teacher_CourseSection", Storage:="_CourseSections", ThisKey:="TeacherID", OtherKey:="TeacherID")>  _
	Public Property CourseSections() As EntitySet(Of CourseSection)
		Get
			Return Me._CourseSections
		End Get
		Set
			Me._CourseSections.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Education_Teacher", Storage:="_Education", ThisKey:="EducationID", OtherKey:="EducationID", IsForeignKey:=true)>  _
	Public Property Education() As Education
		Get
			Return Me._Education.Entity
		End Get
		Set
			Dim previousValue As Education = Me._Education.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Education.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Education.Entity = Nothing
					previousValue.Teachers.Remove(Me)
				End If
				Me._Education.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Teachers.Add(Me)
					Me._EducationID = value.EducationID
				Else
					Me._EducationID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Education")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Rank_Teacher", Storage:="_Rank", ThisKey:="RankID", OtherKey:="RankID", IsForeignKey:=true)>  _
	Public Property Rank() As Rank
		Get
			Return Me._Rank.Entity
		End Get
		Set
			Dim previousValue As Rank = Me._Rank.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Rank.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Rank.Entity = Nothing
					previousValue.Teachers.Remove(Me)
				End If
				Me._Rank.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Teachers.Add(Me)
					Me._RankID = value.RankID
				Else
					Me._RankID = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Rank")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.Teacher = Me
	End Sub
	
	Private Sub detach_CourseSections(ByVal entity As CourseSection)
		Me.SendPropertyChanging
		entity.Teacher = Nothing
	End Sub
End Class
